import serial
import time

PORT = "/dev/ttyACM0"
BAUD = 460800

# CRC8 table (CRSF)
CRC8_TABLE = [
    0x00, 0xD5, 0x7F, 0xAA, 0xFE, 0x2B, 0x81, 0x54,
    0x29, 0xFC, 0x56, 0x83, 0xD7, 0x02, 0xA8, 0x7D,
    0x52, 0x87, 0x2D, 0xF8, 0xAC, 0x79, 0xD3, 0x06,
    0x7B, 0xAE, 0x04, 0xD1, 0x85, 0x50, 0xFA, 0x2F,
    0xA4, 0x71, 0xDB, 0x0E, 0x5A, 0x8F, 0x25, 0xF0,
    0x8D, 0x58, 0xF2, 0x27, 0x73, 0xA6, 0x0C, 0xD9,
    0xF6, 0x23, 0x89, 0x5C, 0x08, 0xDD, 0x77, 0xA2,
    0xDF, 0x0A, 0xA0, 0x75, 0x21, 0xF4, 0x5E, 0x8B,
    0x9D, 0x48, 0xE2, 0x37, 0x63, 0xB6, 0x1C, 0xC9,
    0xB4, 0x61, 0xCB, 0x1E, 0x4A, 0x9F, 0x35, 0xE0,
    0xCF, 0x1A, 0xB0, 0x65, 0x31, 0xE4, 0x4E, 0x9B,
    0xE6, 0x33, 0x99, 0x4C, 0x18, 0xCD, 0x67, 0xB2,
    0x39, 0xEC, 0x46, 0x93, 0xC7, 0x12, 0xB8, 0x6D,
    0x10, 0xC5, 0x6F, 0xBA, 0xEE, 0x3B, 0x91, 0x44,
    0x6B, 0xBE, 0x14, 0xC1, 0x95, 0x40, 0xEA, 0x3F,
    0x42, 0x97, 0x3D, 0xE8, 0xBC, 0x69, 0xC3, 0x16
]

def crsf_crc8(data):
    crc = 0
    for b in data:
        crc = CRC8_TABLE[crc ^ b]
    return crc

def create_rc_frame(channels):
    """16ch RC frame (CRSF type 0x16)"""
    # Betaflight expects 0‚Äì2047 mapped from 988‚Äì2012 ¬µs
    values = [int((ch - 988) * 820 / 1012) for ch in channels]

    bits = 0
    bitcount = 0
    packed = []

    for val in values:
        bits |= (val & 0x7FF) << bitcount
        bitcount += 11
        while bitcount >= 8:
            packed.append(bits & 0xFF)
            bits >>= 8
            bitcount -= 8

    # ÊÆã„Çä„Éì„ÉÉ„Éà„Åå„ÅÇ„Çå„Å∞ÊúÄÂæå„ÅÆ1„Éê„Ç§„ÉàËøΩÂä†
    if len(packed) < 22:
        packed.append(bits & 0xFF)

    # Èï∑„ÅïÂêà„Çè„Åõ
    packed = packed[:22]

    # „Éï„É¨„Éº„É†ÊßãÁØâ
    frame = bytearray()
    frame.append(0xC8)  # Address
    frame.append(24)    # Length = Type(1) + Payload(22) + CRC(1)
    frame.append(0x16)  # Type = RC Channels
    frame.extend(packed)
    frame.append(crsf_crc8(frame[2:]))  # CRC over Type+Payload
    return frame

# --- ÂÆüË°åÈÉ® ---
channels = [1500]*16
aux_beeper = 4  # AUX5

try:
    ser = serial.Serial(PORT, BAUD, timeout=0.1)
    print("‚úÖ Serial connected to", PORT)

    # BEEP ON
    channels[aux_beeper] = 2000
    ser.write(create_rc_frame(channels))
    print("üîî Beep ON")
    time.sleep(1.0)

    # BEEP OFF
    channels[aux_beeper] = 1000
    ser.write(create_rc_frame(channels))
    print("üîï Beep OFF")

    ser.close()

except Exception as e:
    print("‚ùå Error:", e)
